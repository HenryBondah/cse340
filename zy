"""
CSE212 
(c) BYU-Idaho
07-Prove - Problems

It is a violation of BYU-Idaho Honor Code to post or share this code with others or 
to post it online.  Storage into a personal and private repository (e.g. private
GitHub repository, unshared Google Drive folder) is acceptable.
"""

class LinkedList:
    class Node:
        def __init__(self, data):
            self.data = data
            self.next = None
            self.prev = None

    def __init__(self):
        self.head = None
        self.tail = None

    def insert_head(self, value):
        new_node = self.Node(value)
        new_node.next = self.head
        if self.head is not None:
            self.head.prev = new_node
        self.head = new_node
        if self.tail is None:  # List was empty
            self.tail = new_node

    def insert_tail(self, value):  # Problem 1
        new_node = self.Node(value)
        if self.tail is None:  # List is empty
            self.head = new_node
            self.tail = new_node
        else:
            new_node.prev = self.tail
            self.tail.next = new_node
            self.tail = new_node

    def remove_head(self):
        if self.head is not None:
            self.head = self.head.next
            if self.head is not None:
                self.head.prev = None
            else:
                self.tail = None  # List became empty

    def remove_tail(self):  # Problem 2
        if self.head == self.tail:  # List has one node or is empty
            self.head = None
            self.tail = None
        elif self.tail is not None:
            self.tail = self.tail.prev
            self.tail.next = None

    def remove(self, value):  # Problem 3
        curr = self.head
        while curr is not None:
            if curr.data == value:
                if curr == self.head:
                    self.remove_head()
                elif curr == self.tail:
                    self.remove_tail()
                else:
                    curr.prev.next = curr.next
                    if curr.next is not None:
                        curr.next.prev = curr.prev
                return  # Assuming only removing the first occurrence
            curr = curr.next

    def replace(self, old_value, new_value):  # Problem 4
        curr = self.head
        while curr is not None:
            if curr.data == old_value:
                curr.data = new_value
            curr = curr.next

    def __iter__(self):
        self.iter_node = self.head
        return self

    def __next__(self):
        if self.iter_node is None:
            raise StopIteration
        data = self.iter_node.data
        self.iter_node = self.iter_node.next
        return data

    def __reversed__(self):  # Problem 5
        curr = self.tail
        while curr is not None:
            yield curr.data
            curr = curr.prev

# Example usage
if __name__ == "__main__":
    ll = LinkedList()
    for i in range(5):
        ll.insert_head(i)
    for i in range(5, 10):
        ll.insert_tail(i)

    print("List in normal order:")
    for value in ll:
        print(value)

    print("\nList in reversed order:")
    for value in reversed(ll):
        print(value)

    ll.remove(9)  # Remove tail
    ll.remove(0)  # Remove head
    ll.replace(5, 55)

    print("\nAfter modifications:")
    for value in ll:
        print(value)
